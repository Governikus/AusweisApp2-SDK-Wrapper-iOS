// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IDLoneos
import AVFoundation
import AusweisApp2
import Combine
import CoreGraphics
import CoreImage
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class IDLoneosSDK {
  public static let workflowController: IDLoneos.WorkflowController
  public static var sdkTheme: IDLoneos.IDLoneosTheme
  public static func authenticate(withTcTokenUrl tcTokenUrl: Foundation.URL, parentViewController: UIKit.UIViewController, skipAccessRightConfirmation: Swift.Bool = false, presetCan: Swift.String? = nil, completion: @escaping (IDLoneos.AuthResult?) -> Swift.Void)
  public static func changePin(parentViewController: UIKit.UIViewController, completion: @escaping ((IDLoneos.PinChangeResult?) -> Swift.Void))
  public static func changeTransportPin(parentViewController: UIKit.UIViewController, completion: @escaping ((IDLoneos.PinChangeResult?) -> Swift.Void))
  public static func scanIDCard(ofType type: IDLoneos.IDCardType? = nil, parentViewController: UIKit.UIViewController, completion: @escaping ((IDLoneos.IDCardScanResult?) -> Swift.Void))
  public static func scanQRCode(parentViewController: UIKit.UIViewController, completion: @escaping ((IDLoneos.QRCode?) -> Swift.Void))
  @objc deinit
}
public protocol WorkflowCallbacks : AnyObject {
  func onStarted()
  func onAuthenticationStarted()
  func onPinChangeStarted()
  func onRequestAccessRights(accessRights: IDLoneos.AccessRights)
  func onReceivedCertificate(certificateDescription: IDLoneos.CertificateDescription)
  func onRequestCard()
  func onRecognizedCard(card: IDLoneos.Card?)
  func onRequestPin(card: IDLoneos.Card)
  func onRequestNewPin(card: IDLoneos.Card)
  func onRequestPuk(card: IDLoneos.Card)
  func onRequestCan(card: IDLoneos.Card)
  func onAuthenticationCompleted(authResult: IDLoneos.AuthResult)
  func onPinChangeCompleted(pinChangeResult: IDLoneos.PinChangeResult?)
  func onError(error: IDLoneos.WorkflowError)
}
@_hasMissingDesignatedInitializers public class WorkflowController {
  public static let PinLength: Swift.Int
  public static let TransportPinLength: Swift.Int
  public static let PukLength: Swift.Int
  public static let CanLength: Swift.Int
  public static let BadState: Swift.String
  public static let InvalidAccessRights: Swift.String
  public static let InvalidCertificate: Swift.String
  public static let InternalError: Swift.String
  @objc deinit
  public func registerCallbacks(_ callbacks: IDLoneos.WorkflowCallbacks)
  public func unregisterCallbacks(_ callbacks: IDLoneos.WorkflowCallbacks)
  public var isStarted: Swift.Bool {
    get
  }
  public func start()
  public func stop()
  public func startAuthentication(withTcTokenUrl tcTokenUrl: Foundation.URL)
  public func startPinChange()
  public func setOptionalAccessRights(_ optionalAccessRights: [IDLoneos.AccessRight])
  public func interrupt()
  public func setPin(_ pin: Swift.String)
  public func setNewPin(_ newPin: Swift.String)
  public func setPuk(_ puk: Swift.String)
  public func setCan(_ can: Swift.String)
  public func accept()
  public func cancel()
  public func requestCertificate()
}
public struct CertificateDescription {
  public let issuerName: Swift.String
  public let issuerUrl: Foundation.URL?
  public let purpose: Swift.String
  public let subjectName: Swift.String
  public let subjectUrl: Foundation.URL?
  public let termsOfUsage: Swift.String
  public let validity: IDLoneos.CertificateValidity
}
public struct CertificateValidity {
  public let effectiveDate: Foundation.Date
  public let expirationDate: Foundation.Date
}
public struct AccessRights {
  public let requiredRights: [IDLoneos.AccessRight]
  public let optionalRights: [IDLoneos.AccessRight]
  public let effectiveRights: [IDLoneos.AccessRight]
  public let transactionInfo: Swift.String?
  public let optionalProviderData: IDLoneos.OptionalProviderData?
}
public struct OptionalProviderData {
  public let ageVerificationDate: Foundation.Date?
  public let requiredAge: Swift.Int?
  public let validityDate: Foundation.Date?
  public let communityId: Swift.String?
}
public struct Card {
  public let deactivated: Swift.Bool
  public let inoperative: Swift.Bool
  public let pinRetryCounter: Swift.Int
}
public struct AuthResult {
  public let url: Foundation.URL?
  public let error: IDLoneos.AuthError?
}
public struct PinChangeResult {
  public let success: Swift.Bool
}
public struct AuthError {
  public let major: Swift.String
  public let minor: Swift.String
  public let description: Swift.String
  public let message: Swift.String
}
public struct WorkflowError {
  public let type: Swift.String
  public let message: Swift.String
}
public enum AccessRight : Swift.String {
  case Address, BirthName, FamilyName, GivenNames, PlaceOfBirth, DateOfBirth, DoctoralDegree, ArtisticName, Pseudonym, ValidUntil, Nationality, IssuingCountry, DocumentType, ResidencePermitI, ResidencePermitII, CommunityID, AddressVerification, AgeVerification, WriteAddress, WriteCommunityID, WriteResidencePermitI, WriteResidencePermitII, CanAllowed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, *)
public struct AccessRightNames {
}
@available(iOS 13, *)
open class IDLoneosTheme : Foundation.ObservableObject {
  public init()
  open var textAppearanceButton: IDLoneos.TextAppearance {
    get
  }
  open var textAppearanceTitle: IDLoneos.TextAppearance {
    get
  }
  open var textAppearanceBody: IDLoneos.TextAppearance {
    get
  }
  open var textAppearanceListTitle: IDLoneos.TextAppearance {
    get
  }
  open var textAppearanceListItem: IDLoneos.TextAppearance {
    get
  }
  open var textAppearanceListItemCaption: IDLoneos.TextAppearance {
    get
  }
  open var textAppearanceCameraHint: IDLoneos.TextAppearance {
    get
  }
  open var textAppearanceWarning: IDLoneos.TextAppearance {
    get
  }
  open var errorIcon: SwiftUI.AnyView {
    get
  }
  open var passwordErrorIcon: SwiftUI.AnyView {
    get
  }
  open var passwordHiddenIcon: SwiftUI.AnyView {
    get
  }
  open var passwordVisibleIcon: SwiftUI.AnyView {
    get
  }
  open var cameraNoPermissionIcon: SwiftUI.AnyView {
    get
  }
  open var cardRequestedIcon: SwiftUI.AnyView {
    get
  }
  open var loadCertificateIcon: SwiftUI.AnyView {
    get
  }
  open var enterPasswordIcon: SwiftUI.AnyView {
    get
  }
  open var authenticationAbortedIcon: SwiftUI.AnyView {
    get
  }
  open var enterNewPasswordIcon: SwiftUI.AnyView {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@available(iOS 13, *)
public struct TextAppearance {
  public init(font: SwiftUI.Font, color: SwiftUI.Color)
}
public struct DetectionRect : Swift.Equatable {
  public var topLeft: CoreFoundation.CGPoint
  public var topRight: CoreFoundation.CGPoint
  public var bottomLeft: CoreFoundation.CGPoint
  public var bottomRight: CoreFoundation.CGPoint
  public static func == (a: IDLoneos.DetectionRect, b: IDLoneos.DetectionRect) -> Swift.Bool
}
@available(iOS 13, *)
@_Concurrency.MainActor(unsafe) public struct IDCardDetectionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(showDescriptionText: Swift.Bool = true, showViewFinderBounds: Swift.Bool = true, onDetected: ((IDLoneos.IDCardDetectionView, IDLoneos.IDCardScanResult) -> Swift.Void)? = nil, onAborted: ((IDLoneos.IDCardDetectionView) -> Swift.Void)? = nil, onUpdate: ((IDLoneos.IDCardDetectionView, IDLoneos.IDCardObservation?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func finish(withObservation observation: IDLoneos.IDCardObservation)
  @_Concurrency.MainActor(unsafe) public func abort()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8IDLoneos19IDCardDetectionViewV4bodyQrvp", 0) __
}
public enum IDCardType {
  case unknown, germanIDCardFront, germanIDCardBack, germanResidencePermitFront, germanResidencePermitBack
  public static func == (a: IDLoneos.IDCardType, b: IDLoneos.IDCardType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IDCardScanResult {
  var type: IDLoneos.IDCardType { get }
  var image: CoreGraphics.CGImage { get }
}
public struct UnknownIDCard : IDLoneos.IDCardScanResult {
  public let type: IDLoneos.IDCardType
  public let image: CoreGraphics.CGImage
}
@available(iOS 13, *)
public struct IDCardObservation {
  public let cardBounds: IDLoneos.DetectionRect
  public let relativeSize: Swift.Float
}
public struct GermanIDCardFront : IDLoneos.IDCardScanResult {
  public let type: IDLoneos.IDCardType
  public let image: CoreGraphics.CGImage
  public let serialNumber: Swift.String
  public let can: Swift.String
  public let surname: Swift.String
  public let givenNames: Swift.String
  public let dateOfBirth: Swift.String
  public let nationality: Swift.String
  public let placeOfBirth: Swift.String
  public let dateOfExpiry: Swift.String
}
public struct GermanIDCardBack : IDLoneos.IDCardScanResult {
  public let type: IDLoneos.IDCardType
  public let image: CoreGraphics.CGImage
  public let colorOfEyes: Swift.String
  public let height: Swift.String
  public let date: Swift.String
  public let authority: Swift.String
  public let address: Swift.String
  public let serialNumber: Swift.String
}
public struct GermanResidencePermitFront : IDLoneos.IDCardScanResult {
  public let type: IDLoneos.IDCardType
  public let image: CoreGraphics.CGImage
  public let serialNumber: Swift.String
  public let can: Swift.String
  public let name: Swift.String
  public let dateOfExpiry: Swift.String
  public let placeOfIssue: Swift.String
  public let dateOfIssue: Swift.String
  public let typeOfTitle: Swift.String
  public let note: Swift.String
}
public struct GermanResidencePermitBack : IDLoneos.IDCardScanResult {
  public let type: IDLoneos.IDCardType
  public let image: CoreGraphics.CGImage
  public let placeOfBirth: Swift.String
  public let dateOfBirth: Swift.String
  public let nationality: Swift.String
  public let sex: Swift.String
  public let height: Swift.String
  public let colorOfEyes: Swift.String
  public let address: Swift.String
  public let foreignersAuthority: Swift.String
  public let serialNumber: Swift.String
}
public struct QRCode {
  public let rawValue: Swift.String
}
extension IDLoneos.AccessRight : Swift.Equatable {}
extension IDLoneos.AccessRight : Swift.Hashable {}
extension IDLoneos.AccessRight : Swift.RawRepresentable {}
extension IDLoneos.IDCardType : Swift.Equatable {}
extension IDLoneos.IDCardType : Swift.Hashable {}
